digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	1 [color="#fc1300", fontcolor="#ffffff", fontsize="10.00", label="main\n98.18%\n(0.01%)"];
	1 -> 2 [arrowsize="0.92", color="#e98a03", fontcolor="#e98a03", fontsize="10.00", label="85.32%\n373×", labeldistance="3.41", penwidth="3.41"];
	1 -> 4 [arrowsize="0.35", color="#0d297b", fontcolor="#0d297b", fontsize="10.00", label="6.35%\n373×", labeldistance="0.50", penwidth="0.50"];
	1 -> 5 [arrowsize="0.35", color="#0d2179", fontcolor="#0d2179", fontsize="10.00", label="4.60%\n373×", labeldistance="0.50", penwidth="0.50"];
	1 -> 11 [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="1.89%\n373×", labeldistance="0.50", penwidth="0.50"];
	2 [color="#e98a03", fontcolor="#ffffff", fontsize="10.00", label="myMatching(int*, int*, int*, int*, Matcher::p_match*, int&)\n85.32%\n(0.13%)\n373×"];
	2 -> 3 [arrowsize="0.92", color="#e98b03", fontcolor="#e98b03", fontsize="10.00", label="85.19%\n13421996×", labeldistance="3.41", penwidth="3.41"];
	3 [color="#e98b03", fontcolor="#ffffff", fontsize="10.00", label="myCreateIndexVector(int*, int&, int (*) [160], int*, int const&, int const&, int*)\n85.19%\n(85.15%)\n13421996×"];
	4 [color="#0d297b", fontcolor="#ffffff", fontsize="10.00", label="myComputeFeatures(unsigned char*, int*, int*)\n6.35%\n(0.00%)\n373×"];
	4 -> 7 [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.58%\n373×", labeldistance="0.50", penwidth="0.50"];
	4 -> 9 [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.29%\n373×", labeldistance="0.50", penwidth="0.50"];
	4 -> 18 [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.96%\n373×", labeldistance="0.50", penwidth="0.50"];
	4 -> 24 [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n373×", labeldistance="0.50", penwidth="0.50"];
	5 [color="#0d2179", fontcolor="#ffffff", fontsize="10.00", label="VisualOdometry::updateMotion(std::vector<Matcher::p_match, std::allocator<Matcher::p_match> >&)\n4.60%\n(0.00%)\n373×"];
	5 -> 6 [arrowsize="0.35", color="#0d2079", fontcolor="#0d2079", fontsize="10.00", label="4.55%\n373×", labeldistance="0.50", penwidth="0.50"];
	6 [color="#0d2079", fontcolor="#ffffff", fontsize="10.00", label="VisualOdometryMono::estimateMotion(std::vector<Matcher::p_match, std::allocator<Matcher::p_match> >)\n4.55%\n(0.01%)\n373×"];
	6 -> 10 [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.86%\n744372×", labeldistance="0.50", penwidth="0.50"];
	6 -> 14 [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.23%\n744000×", labeldistance="0.50", penwidth="0.50"];
	6 -> 15 [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.20%\n372×", labeldistance="0.50", penwidth="0.50"];
	6 -> 21 [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.76%\n744000×", labeldistance="0.50", penwidth="0.50"];
	7 [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="myNonMaximumSuppression_and_ComputeDescriptors(short*, short*, int const*, unsigned char*, unsigned char*, int*, int*) [clone .constprop.0]\n2.58%\n(1.81%)\n373×"];
	7 -> 23 [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.75%\n5577096000×", labeldistance="0.50", penwidth="0.50"];
	8 [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="Matrix::svd(Matrix&, Matrix&, Matrix&)\n2.42%\n(1.85%)\n1816876×"];
	9 [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="mySobel5x5(unsigned char const*, unsigned char*, unsigned char*, int, int) [clone .constprop.0]\n2.29%\n(1.96%)\n373×"];
	9 -> 20 [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n2769748800×", labeldistance="0.50", penwidth="0.50"];
	10 [color="#0d1675", fontcolor="#ffffff", fontsize="10.00", label="VisualOdometryMono::fundamentalMatrix(std::vector<Matcher::p_match, std::allocator<Matcher::p_match> > const&, std::vector<int, std::allocator<int> > const&, Matrix&)\n2.10%\n(0.02%)\n1824257×"];
	10 -> 8 [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="1.98%\n1488744×", labeldistance="0.50", penwidth="0.50"];
	11 [color="#0d1575", fontcolor="#ffffff", fontsize="10.00", label="removeOutliers(Matcher::p_match*, int&, int, float, float)\n1.89%\n(0.05%)\n373×"];
	11 -> 13 [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.74%\n372×", labeldistance="0.50", penwidth="0.50"];
	12 [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="__libc_csu_init\n1.79%\n(0.00%)"];
	12 -> 17 [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.01%\n1×", labeldistance="0.50", penwidth="0.50"];
	12 -> 22 [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.76%\n1×", labeldistance="0.50", penwidth="0.50"];
	13 [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="delaunator::Delaunator::delaunat()\n1.74%\n(0.05%)\n372×"];
	13 -> 16 [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.10%\n372×", labeldistance="0.50", penwidth="0.50"];
	14 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="VisualOdometryMono::getInlier(std::vector<Matcher::p_match, std::allocator<Matcher::p_match> >&, Matrix&)\n1.23%\n(0.91%)\n744000×"];
	15 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="VisualOdometryMono::smallerThanMedian(Matrix&, double&)\n1.20%\n(0.00%)\n372×"];
	15 -> 19 [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.87%\n372×", labeldistance="0.50", penwidth="0.50"];
	16 [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="delaunator::Delaunator::InsertionSort(int*, data*, int)\n1.10%\n(1.10%)\n372×"];
	17 [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="__static_initialization_and_destruction_0(int, int) [clone .constprop.0]\n1.01%\n(1.01%)\n1×"];
	18 [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="myBlob5x5(unsigned char const*, short*, int, int) [clone .constprop.0]\n0.96%\n(0.70%)\n373×"];
	18 -> 20 [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n2131098200×", labeldistance="0.50", penwidth="0.50"];
	19 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="void std::__sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_comp_iter<VisualOdometryMono::idx_cmp<std::vector<double, std::allocator<double> >&> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_comp_iter<VisualOdometryMono::idx_cmp<std::vector<double, std::allocator<double> >&> >)\n0.87%\n(0.00%)\n372×"];
	19 -> 25 [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n372×", labeldistance="0.50", penwidth="0.50"];
	20 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="myGetAddressOffsetImage(int, int, int) [clone .constprop.0]\n0.80%\n(0.80%)\n6711836600×"];
	21 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="VisualOdometry::getRandomSample(int, int)\n0.76%\n(0.08%)\n744000×"];
	22 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="_GLOBAL__sub_I__Z19myComputeDescriptorPKhS0_iiiPh\n0.76%\n(0.76%)\n1×"];
	23 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="myGetAddressOffsetImage(int, int, int)\n0.75%\n(0.75%)\n5583806625×"];
	24 [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="myCheckerboard5x5(unsigned char const*, short*, int, int) [clone .constprop.0]\n0.53%\n(0.31%)\n373×"];
	24 -> 20 [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.22%\n1810989600×", labeldistance="0.50", penwidth="0.50"];
	25 [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<VisualOdometryMono::idx_cmp<std::vector<double, std::allocator<double> >&> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<VisualOdometryMono::idx_cmp<std::vector<double, std::allocator<double> >&> >)\n0.53%\n(0.00%)\n8221×"];
	25 -> 25 [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="7849×", labeldistance="0.50", penwidth="0.50"];
	25 -> 26 [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n7849×", labeldistance="0.50", penwidth="0.50"];
	26 [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_comp_iter<VisualOdometryMono::idx_cmp<std::vector<double, std::allocator<double> >&> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_comp_iter<VisualOdometryMono::idx_cmp<std::vector<double, std::allocator<double> >&> >)\n0.53%\n(0.00%)\n7849×"];
}
