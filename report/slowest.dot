digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	1 [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="main\n99.89%\n(0.00%)"];
	1 -> 2 [arrowsize="0.98", color="#f82f01", fontcolor="#f82f01", fontsize="10.00", label="95.31%\n373×", labeldistance="3.81", penwidth="3.81"];
	1 -> 4 [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.51%\n373×", labeldistance="0.50", penwidth="0.50"];
	1 -> 5 [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.29%\n373×", labeldistance="0.50", penwidth="0.50"];
	1 -> 9 [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.78%\n373×", labeldistance="0.50", penwidth="0.50"];
	2 [color="#f82f01", fontcolor="#ffffff", fontsize="10.00", label="myMatching(int*, int*, int*, int*, Matcher::p_match*, int&)\n95.31%\n(0.06%)\n373×"];
	2 -> 3 [arrowsize="0.98", color="#f83001", fontcolor="#f83001", fontsize="10.00", label="95.22%\n13421250×", labeldistance="3.81", penwidth="3.81"];
	3 [color="#f83001", fontcolor="#ffffff", fontsize="10.00", label="myFindMatch(int*, int const&, int*, int const&, int (*) [160], int*, int const&, int const&, int const&, int&, int)\n95.22%\n(95.22%)\n13421250×"];
	4 [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="myComputeFeatures(unsigned char*, int*, int*)\n2.51%\n(0.00%)\n373×"];
	4 -> 7 [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.12%\n373×", labeldistance="0.50", penwidth="0.50"];
	4 -> 12 [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.62%\n373×", labeldistance="0.50", penwidth="0.50"];
	5 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="VisualOdometry::updateMotion(std::vector<Matcher::p_match, std::allocator<Matcher::p_match> >&)\n1.29%\n(0.00%)\n373×"];
	5 -> 6 [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.28%\n373×", labeldistance="0.50", penwidth="0.50"];
	6 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="VisualOdometryMono::estimateMotion(std::vector<Matcher::p_match, std::allocator<Matcher::p_match> >)\n1.28%\n(0.00%)\n373×"];
	6 -> 13 [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n744372×", labeldistance="0.50", penwidth="0.50"];
	7 [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="myNonMaximumSuppression_and_ComputeDescriptors(short*, short*, int const*, unsigned char*, unsigned char*, int*, int*)\n1.12%\n(0.67%)\n373×"];
	7 -> 8 [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.44%\n5577096000×", labeldistance="0.50", penwidth="0.50"];
	8 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="myGetAddressOffsetImage(int, int, int)\n0.79%\n(0.79%)\n10058016225×"];
	9 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="removeOutliers(Matcher::p_match*, int&, int, float, float)\n0.78%\n(0.01%)\n373×"];
	9 -> 10 [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.75%\n372×", labeldistance="0.50", penwidth="0.50"];
	10 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="delaunator::Delaunator::delaunat()\n0.75%\n(0.01%)\n372×"];
	10 -> 14 [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.54%\n372×", labeldistance="0.50", penwidth="0.50"];
	11 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="Matrix::svd(Matrix&, Matrix&, Matrix&)\n0.69%\n(0.60%)\n1816876×"];
	12 [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="mySobel5x5(unsigned char const*, unsigned char*, unsigned char*, int, int) [clone .constprop.0]\n0.62%\n(0.40%)\n373×"];
	13 [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="VisualOdometryMono::fundamentalMatrix(std::vector<Matcher::p_match, std::allocator<Matcher::p_match> > const&, std::vector<int, std::allocator<int> > const&, Matrix&)\n0.61%\n(0.00%)\n744372×"];
	13 -> 11 [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.57%\n1488744×", labeldistance="0.50", penwidth="0.50"];
	14 [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="delaunator::Delaunator::InsertionSort(int*, data*, int)\n0.54%\n(0.54%)\n372×"];
}
